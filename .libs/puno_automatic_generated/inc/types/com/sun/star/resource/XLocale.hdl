#ifndef INCLUDED_COM_SUN_STAR_RESOURCE_XLOCALE_HDL
#define INCLUDED_COM_SUN_STAR_RESOURCE_XLOCALE_HDL

#include "sal/config.h"

#include "com/sun/star/lang/Locale.hdl"
#include "com/sun/star/uno/XInterface.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"
#include "sal/types.h"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace resource {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XLocale : public ::css::uno::XInterface
{
public:

    // Methods
    virtual ::css::lang::Locale SAL_CALL create( const ::rtl::OUString& aLanguage, const ::rtl::OUString& aCountry, const ::rtl::OUString& aVariant ) = 0;
    virtual ::css::lang::Locale SAL_CALL getDefault() = 0;
    virtual void SAL_CALL setDefault( const ::css::lang::Locale& newLocale ) = 0;
    virtual ::css::uno::Sequence< ::css::lang::Locale > SAL_CALL getAvailableLocales() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getISOCountries() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getISOLanguages() = 0;
    virtual ::css::uno::Sequence< ::rtl::OUString > SAL_CALL getLanguagesForCountry( const ::rtl::OUString& country ) = 0;
    virtual ::rtl::OUString SAL_CALL getISO3Language( const ::css::lang::Locale& locale ) = 0;
    virtual ::rtl::OUString SAL_CALL getISO3Country( const ::css::lang::Locale& locale ) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayLanguage_Default( const ::css::lang::Locale& locale ) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayLanguage( const ::css::lang::Locale& locale, const ::css::lang::Locale& inLocale ) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayCountry_Default( const ::css::lang::Locale& locale ) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayCountry( const ::css::lang::Locale& locale, const ::css::lang::Locale& inLocale ) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayVariant_Default( const ::css::lang::Locale& locale ) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayVariant( const ::css::lang::Locale& locale, const ::css::lang::Locale& inLocale ) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayName_Default( const ::css::lang::Locale& locale ) = 0;
    virtual ::rtl::OUString SAL_CALL getDisplayName( const ::css::lang::Locale& locale, const ::css::lang::Locale& inLocale ) = 0;
    virtual ::sal_Bool SAL_CALL equals( const ::css::lang::Locale& l1, const ::css::lang::Locale& l2 ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XLocale() throw () {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::resource::XLocale const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::resource::XLocale > *);

#endif
