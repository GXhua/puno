#ifndef INCLUDED_COM_SUN_STAR_CHART_XCOMPLEXDESCRIPTIONACCESS_HDL
#define INCLUDED_COM_SUN_STAR_CHART_XCOMPLEXDESCRIPTIONACCESS_HDL

#include "sal/config.h"

#include "com/sun/star/chart/XChartDataArray.hdl"
#include "com/sun/star/uno/Reference.h"
#include "com/sun/star/uno/Sequence.h"
#include "cppu/macros.hxx"
#include "rtl/ustring.hxx"

namespace com { namespace sun { namespace star { namespace uno { class Type; } } } }

namespace com { namespace sun { namespace star { namespace chart {

class SAL_NO_VTABLE SAL_DLLPUBLIC_RTTI XComplexDescriptionAccess : public ::css::chart::XChartDataArray
{
public:

    // Methods
    virtual ::css::uno::Sequence< ::css::uno::Sequence< ::rtl::OUString > > SAL_CALL getComplexRowDescriptions() = 0;
    virtual void SAL_CALL setComplexRowDescriptions( const ::css::uno::Sequence< ::css::uno::Sequence< ::rtl::OUString > >& rRowDescriptions ) = 0;
    virtual ::css::uno::Sequence< ::css::uno::Sequence< ::rtl::OUString > > SAL_CALL getComplexColumnDescriptions() = 0;
    virtual void SAL_CALL setComplexColumnDescriptions( const ::css::uno::Sequence< ::css::uno::Sequence< ::rtl::OUString > >& rColumnDescriptions ) = 0;

    static inline ::css::uno::Type const & SAL_CALL static_type(void * = 0);

protected:
    ~XComplexDescriptionAccess() throw () {} // avoid warnings about virtual members and non-virtual dtor
};


inline ::css::uno::Type const & cppu_detail_getUnoType(SAL_UNUSED_PARAMETER ::css::chart::XComplexDescriptionAccess const *);
} } } }

SAL_DEPRECATED("use cppu::UnoType") inline ::css::uno::Type const & SAL_CALL getCppuType(const ::css::uno::Reference< ::css::chart::XComplexDescriptionAccess > *);

#endif
